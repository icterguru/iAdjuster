<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		 http://www.springframework.org/schema/tx/ http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">

	 <!-- This allow for dispatching requests to Controllers -->
	<mvc:annotation-driven />

	<mvc:resources location="assets" mapping="/assets/**" />
	<mvc:resources location="pdfs" mapping="/pdfs/**" />
    <mvc:resources location="/assets/theme1/" mapping="/assets/theme1/**"  cache-period="31556926"/>
    <mvc:resources location="images" mapping="/iamages/**"  cache-period="31556926"/>
   

	<!-- It register the beans in context and scan the annotations inside beans 
		and activate them. i.e., It does the bean discovery (searches for @Component annotation in base package) 
		and then activates the additional annotations (e.g. Autowired).
		 -->
	<context:component-scan base-package="com.iadjuster" />

<!-- 
<context:annotation-config /> activate the annotations only on beans which have already been 
discovered and registered. 
More at: http://howtodoinjava.com/spring/spring-mvc/spring-mvc-difference-between-contextannotation-config-vs-contextcomponent-scan/


 -->


	<bean
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="order" value="1" />
		<property name="contentNegotiationManager">
			<bean class="org.springframework.web.accept.ContentNegotiationManager">
				<constructor-arg>
					<bean
						class="org.springframework.web.accept.PathExtensionContentNegotiationStrategy">
						<constructor-arg>
							<map>
								<entry key="json" value="application/json" />
								<entry key="xml" value="application/xml" />
							</map>
						</constructor-arg>
					</bean>
				</constructor-arg>
			</bean>
		</property>

		<property name="defaultViews">
			<list>
				<bean
					class="org.springframework.web.servlet.view.json.MappingJacksonJsonView" />
				<bean class="org.springframework.web.servlet.view.xml.MarshallingView">
					<constructor-arg>
						<bean class="org.springframework.oxm.xstream.XStreamMarshaller">
							<property name="autodetectAnnotations" value="true" />
						</bean>
					</constructor-arg>
				</bean>
			</list>
		</property>
	</bean>

	<mvc:interceptors>
		<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"
			p:paramName="language" />
	</mvc:interceptors>

	<bean id="localeResolver"
		class="org.springframework.web.servlet.i18n.SessionLocaleResolver"
		p:defaultLocale="en" />

 <!-- This resolves messages from resource bundles for different locales -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource"
		p:basename="messages"></bean>

 <!-- This helps in mapping the logical view names to directly view files under a certain pre-configured directory -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		p:prefix="/WEB-INF/views/" p:suffix=".jsp" p:order="2" />

	<bean class="org.springframework.web.servlet.view.BeanNameViewResolver"
		p:order="0" />


<!-- 
Help:  http://stackoverflow.com/questions/12123516/getting-exception-no-bean-named-springsecurityfilterchain-is-defined

<bean id="springSecurityFilterChain" class="org.springframework.web.filter.DelegatingFilterProxy"/>
 -->

</beans>
